{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/openbush/openbush_frontend/src/Dapp/tabs/my-nft.js\";\nimport React from \"react\";\nimport { List, message } from \"antd\";\nimport web3 from \"../utils/InitWeb3\";\nimport contractInstance from \"../utils/config\";\nimport MyNFTCard from \"../components/card/my-nft-card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MyNFTTab extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      myNFTs: [],\n      myNFTNum: 0,\n      isConnected: false,\n      address: \"\"\n    };\n  }\n\n  async getNFTs(NFTIds) {\n    let NFTs = [];\n    let i = 0;\n\n    for (; i < 10 && NFTIds[i] != 11; i++) {\n      let NFT = await contractInstance.methods.NFTs(i).call();\n      NFTs.push(NFT);\n      console.log(NFT);\n    }\n\n    this.setState({\n      myNFTs: NFTs,\n      myNFTNum: i\n    });\n  }\n\n  async componentDidMount() {\n    let accounts = await web3.eth.getAccounts();\n    console.log(\"进来了\");\n\n    if (accounts.length == 0) {\n      this.setState({\n        isConnected: false\n      });\n    } else {\n      this.setState({\n        isConnected: true,\n        address: accounts[0]\n      });\n\n      try {\n        // let NFTIds = await contractInstance.methods.getNFT().send({\n        //     from: accounts[0],\n        //     gas: 3000000,\n        // })\n        await contractInstance.methods.refreshAuction().send({\n          from: accounts[0]\n        });\n        console.log(accounts[0]);\n        let NFTIds = await contractInstance.methods.getNFT().call({\n          from: accounts[0]\n        });\n        console.log(NFTIds);\n        await this.getNFTs(NFTIds);\n        console.log(this.state.myNFTs);\n      } catch (e) {\n        console.log(e);\n        message.error(\"获取信息失败\");\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        itemLayout: \"horizontal\",\n        dataSource: this.state.myNFTs,\n        renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n          children: /*#__PURE__*/_jsxDEV(MyNFTCard, {\n            NFT: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyNFTTab;","map":{"version":3,"sources":["/Users/apple/Documents/openbush/openbush_frontend/src/Dapp/tabs/my-nft.js"],"names":["React","List","message","web3","contractInstance","MyNFTCard","MyNFTTab","Component","state","myNFTs","myNFTNum","isConnected","address","getNFTs","NFTIds","NFTs","i","NFT","methods","call","push","console","log","setState","componentDidMount","accounts","eth","getAccounts","length","refreshAuction","send","from","getNFT","e","error","render","item"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {List, message} from \"antd\";\r\n\r\nimport web3 from \"../utils/InitWeb3\";\r\nimport contractInstance from \"../utils/config\";\r\nimport MyNFTCard from \"../components/card/my-nft-card\";\r\nclass MyNFTTab extends React.Component{\r\n    state={\r\n        myNFTs: [],\r\n        myNFTNum: 0,\r\n        isConnected: false,\r\n        address: \"\",\r\n    }\r\n\r\n    async getNFTs(NFTIds){\r\n        let NFTs = [];\r\n        let i = 0;\r\n        for(; i < 10 && NFTIds[i] != 11; i++){\r\n            let NFT = await contractInstance.methods.NFTs(i).call()\r\n            NFTs.push(NFT);\r\n            console.log(NFT);\r\n        }\r\n        this.setState({\r\n            myNFTs: NFTs,\r\n            myNFTNum: i,\r\n        })\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let accounts = await web3.eth.getAccounts()\r\n        console.log(\"进来了\")\r\n        if(accounts.length == 0){\r\n            this.setState({\r\n                isConnected: false,\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                isConnected: true,\r\n                address: accounts[0]\r\n            })\r\n            try{\r\n                // let NFTIds = await contractInstance.methods.getNFT().send({\r\n                //     from: accounts[0],\r\n                //     gas: 3000000,\r\n                // })\r\n                await contractInstance.methods.refreshAuction().send({\r\n                    from: accounts[0],\r\n                });\r\n                console.log(accounts[0])\r\n                let NFTIds = await contractInstance.methods.getNFT().call({\r\n                    from: accounts[0],\r\n                });\r\n                console.log(NFTIds)\r\n                await this.getNFTs(NFTIds);\r\n                console.log(this.state.myNFTs);\r\n            }\r\n            catch(e){\r\n                console.log(e);\r\n                message.error(\"获取信息失败\");\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={this.state.myNFTs}\r\n                    renderItem={(item) =>(\r\n                        <List.Item>\r\n                            <MyNFTCard NFT={item}></MyNFTCard>\r\n                        </List.Item>\r\n                    )}    \r\n                >\r\n                </List>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MyNFTTab;"]},"metadata":{},"sourceType":"module"}